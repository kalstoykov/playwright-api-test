name: API Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Test Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      test_suite:
        description: 'Test Suite to Run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - api
          - auth
          - users
          - health
          - integration

env:
  NODE_VERSION: '22'
  PLAYWRIGHT_VERSION: '1.55'

jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          # Add linting commands if you have ESLint configured
          echo "Linting completed - add ESLint configuration if needed"

      - name: Validate test files
        run: |
          echo "Validating test structure..."
          find tests -name "*.spec.js" -type f | wc -l
          echo "Test files found"

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || 'staging' }}
        node-version: ['18', '20']
        include:
          - environment: staging
            base-url: ${{ secrets.STAGING_API_URL }}
          - environment: production
            base-url: ${{ secrets.PROD_API_URL }}
          - environment: development
            base-url: 'http://localhost:3000'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          echo "BASE_URL=${{ matrix.base-url || 'http://localhost:3000' }}" >> $GITHUB_ENV
          echo "TEST_ENV=${{ matrix.environment }}" >> $GITHUB_ENV
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> $GITHUB_ENV
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> $GITHUB_ENV
          echo "USER_EMAIL=${{ secrets.USER_EMAIL }}" >> $GITHUB_ENV
          echo "USER_PASSWORD=${{ secrets.USER_PASSWORD }}" >> $GITHUB_ENV
          echo "CLEANUP_TEST_DATA=true" >> $GITHUB_ENV
          echo "GENERATE_REPORTS=true" >> $GITHUB_ENV

      - name: Start local API (if development)
        if: matrix.environment == 'development'
        run: |
          # Add commands to start your local API server
          echo "Starting local API server..."
          # npm run start:api &
          # sleep 30

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to be ready..."
          timeout 300 bash -c 'until curl -f ${{ env.BASE_URL }}/health; do echo "Waiting for API..."; sleep 5; done'

      - name: Run specific test suite
        if: github.event.inputs.test_suite && github.event.inputs.test_suite != 'all'
        run: npm run test:${{ github.event.inputs.test_suite }}
        env:
          CI: true

      - name: Run all API tests
        if: !github.event.inputs.test_suite || github.event.inputs.test_suite == 'all'
        run: npm test
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.environment }}-node${{ matrix.node-version }}
          path: |
            playwright-report/
            test-results/
            reports/
          retention-days: 10

      - name: Upload test results to GitHub Pages
        if: github.ref == 'refs/heads/main' && matrix.environment == 'staging' && matrix.node-version == '18'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report
          destination_dir: test-reports

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: api-tests
    if: github.event_name == 'schedule' || github.event.inputs.environment == 'staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          # Add your performance test commands here
          npm test -- --grep "performance|load|stress"
        env:
          BASE_URL: ${{ secrets.STAGING_API_URL }}
          TEST_ENV: staging
          CI: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: reports/
          retention-days: 30

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name != 'pull_request' || github.base_ref == 'main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run security tests
        run: |
          echo "Running security-focused API tests..."
          # Add security-specific test commands
          npm test -- --grep "security|auth|unauthorized"
        env:
          BASE_URL: ${{ secrets.STAGING_API_URL }}
          TEST_ENV: staging
          CI: true

  # Job 5: Test Results Summary and Notifications
  results-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [api-tests, performance-tests, security-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate summary report
        run: |
          echo "# ðŸŽ­ Playwright API Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ matrix.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Lint**: ${{ needs.lint.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API Tests**: ${{ needs.api-tests.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests**: ${{ needs.performance-tests.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Tests**: ${{ needs.security-tests.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY

      - name: Send Slack notification on failure
        if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ðŸš¨ API Tests Failed!
            Environment: ${{ matrix.environment || 'staging' }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Check the GitHub Actions logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack notification on success
        if: success() && github.event_name == 'schedule'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            âœ… Scheduled API Tests Passed!
            Environment: ${{ matrix.environment || 'staging' }}
            All tests completed successfully.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-reports:
    name: Deploy Test Reports
    runs-on: ubuntu-latest
    needs: [api-tests]
    if: github.ref == 'refs/heads/main' && needs.api-tests.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          merge-multiple: true

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report
          destination_dir: latest
